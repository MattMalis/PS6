testTable<-plotRealClear("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
testTable
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
real_clear_URL<- "http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html"
advantage_cand<- "Trump"
all_tables <- readHTMLTable(real_clear_URL)
libraryj(XML)
library(XML)
all_tables <- readHTMLTable(real_clear_URL)
polls_table <- all_tables[[length(all_tables)]]
polls_table
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
polls_table$split_dates
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
polls_table$end_date
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
polls_table[,5]
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
adv_cand_index
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
polls_table$end_date
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_date
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
polls_table$end_date
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
abline(h=0,col=3,lty=3)
return(polls_table)
rm(real_clear_URL)
rm(advantage_cand)
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
sum.plus.2 <- function(x){
sum(x) + 2
}
apply(mat1, 1, sum.plus.2)
apply(mat1, 1, function(x, y) sum(x) + y, y=3)
apply(mat1, 2, function(x, y) sum(x) + y, y=5)
apply(mat1, 2)
mat1.df <- data.frame(mat1)
mat1.df
is.list(mat1.df)
lapply(mat1.df, sum)
y <- lapply(mat1.df, sum)
is.list(y)
names(y)
unlist(lapply(1:5, function(i) 5+i ))
outVec <- NULL
for(i in 1:5){
outVec <- c(outVec, 5+i)
}
outVec
y2 <- sapply(mat1.df, function(x, y) sum(x) + y, y = 5)
y2
is.vector(y2)
is.list(y2)
x1 <- runif(16)
x1
cat1 <- rep(1:4, 4)
cat1
cat2 <- c(rep(1, 8), rep(2, 8))
cat2
mat2.df <- data.frame(x1)
names(mat2.df) <- c("x1")
mat2.df$cat1 <- cat1
mat2.df$cat2 <- cat2
mat2.df
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
outVec <- NULL
for (i in unique(mat2.df$cat1)){
outVec <- c(outVec, mean(mat2.df$x1[mat2.df$cat1==i]))
}
outVec
tapply(mat2.df$x1, list(mat2.df$cat1, mat2.df$cat2), mean)
mean(mat2.df$x1[mat2.df$cat1==1 & mat2.df$cat2==1])
a <- matrix(runif(100, 1, 2),20)
a
a.df <- data.frame(a)
colMeans(a)
a1 <- sweep(a, 2, colMeans(a), "-")
a1
colMeans(a1)
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
mat2.df
byOut <- by(data=mat2.df$x1, INDICES=mat2.df$cat1, mean)
str(byOut)
length(byOut)
is.list(byOut)
is.vector(byOut)
class(byOut)
l <- list(a = 1:10, b = 11:20)
l
?fivenum
l.fivenum <- vapply(X=l, FUN=fivenum, FUN.VALUE=c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
class(l.fivenum)
l.fivenum
replicate(10, rnorm(10))
replicate(10, rnorm(5))
l1 <- list(a = c(1:10), b = c(11:20))
l2 <- list(c = c(21:30), d = c(31:40))
l1
l2
mapply(sum, l1$a, l1$b, l2$c, l2$d)
dd<-data.frame(matrix(rnorm(216),72,3),c(rep("A",24),rep("B",24),rep("C",24)),c(rep("J",36),rep("K",36)))
dd
colnames(dd) <- c("v1", "v2", "v3", "dim1", "dim2")
head(dd)
library(plyr)
obj1 <- ddply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df) mean(df$v1))
obj1
obj2 <- daply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df)mean(df$v1))
obj2 # why are these different?
l_ply(1:100, identity)
llply(1:100, identity)
laply(1:100, identity)
ldply(1:100, identity)
library('doMC')
install.packages("doMC")
library('doMC')
library('doMC')
library('foreach')
myX <- 20
myY <- c(1:100)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=4)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=1)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=2)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
a1<-(runif(20*5*1000), dim=c(20,5,1000))
a1<-array(runif(20*5*1000), dim=c(20,5,1000))
structure(a1)
dim(a1)
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
a0<-(runif(20),dim=(4,5))
a0<-array(runif(20),dim=(4,5))
a0<-array(runif(20), dim=(4,5))
a0<-array(runif(20), dim=(4,5,1))
a0 <-array(runif(20), dim=(4,5))
a8 <-array(runif(20), dim=(4,5))
a0 <-array(runif(20), dim=c(4,5))
a0
b0<-c(3:7)
x<-apply(a0, c(1,3), %*%b0)
x<-apply(a0, c(1,3), function(x) x%*%b0)
x<-apply(a0, c(1,3), function(y) y%*%b0)
b0
x<-apply(a0, 1, function(y) y%*%b0)
b0
a0
x<-apply(a0, 1, function(y) y%*%b0)
x
getwd()
setwd("/Users/iramalis/Desktop/gitstuff/PS6")
library(devtools)
library(roxygen2)
setwd("/Users/iramalis/Desktop/gitstuff/PS6") #This will need to be changed to match your directory
library(squaresPack)
?addSquares
?def
?createCandidate
?cbind
?names
?show
?print
print("first line: " 34,
"/nsecond line:")
print(c("first line: " 34,
print(c("first line: ", "this"
"/nsecond line:"))
print("first line: ", "this",
"/nsecond line:")
?print
print("first line: ", "this", "/nsecond line:")
print(c("first line: ", "this", "/nsecond line:"))
print(paste("first line: ", "this", "/nsecond line:"))
print(paste("first line: ", "this", "\nsecond line:"))
writeLines(("first line: ", "this", "\nsecond line:"))
writeLines(paste("first line: ", "this", "\nsecond line:"))
library(devtools)
library(roxygen2)
setwd("/Users/iramalis/Desktop/gitstuff/PS6") #This will need to be changed to match your directory
current.code <- as.package("candidatePackage")
setwd("/Users/iramalis/Desktop/gitstuff/PS6") #This will need to be changed to match your directory
current.code <- as.package("candidatePackage")
rm(list=ls())
source(Candidate.R)
source("Candidate.R")
source("Candidate.R")
rm(list=ls())
source("Candidate.R")
source("totalNeeded.R")
source("propNeeded.R")
source("createCandidate.R")
search()
ls()
source("Candidate.R")
package.skeleton(name = "candidatePackage", list = c(
"Candidate", "totalNeeded", "propNeeded", "createCandidate"
))
rm(list=ls())
current.code <- as.package("candidatePackage")
package.skeleton(name = "candidatePackage")
current.code <- as.package("candidatePackage")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
setwd("/Users/iramalis/Desktop/gitstuff/PS6") #This will need to be changed to match your directory
rm(list=ls())
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
totalNeeded
totalNeeded("Democrat")
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
rm(list=ls())
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
totalNeeded("Democrat")
totalNeeded("Republican")
totalNeeded("Donald Trump")
?createCdndiate
?createCandiate
?createCandidate
createCandidate
createCandidate("Hillary Clinton", 400, "Democrat")
clinton<-createCandidate("Hillary Clinton", 400, "Democrat")
propNeeded(clinton)
propNeeded(clinton, 3000)
propNeeded(Bernie, 103)
propNeeded("Bernie", 103)
getMethod(propNeeded)
rm(list=ls())
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
propNeeded(clinton, 3000)
clinton<-createCandidate("Hillary Clinton", 400, "Democrat")
propNeeded(clinton, 3000)
rm(list=ls())
current.code <- as.package("candPack")
load_all(current.code)
document(current.code)
totalNeeded("Republican")
totalNeeded("Donald Trump")
clinton<-createCandidate("Hillary Clinton", 1400, "Democrat")
propNeeded(clinton, 3000)
clinton<-createCandidate("Hillary Clinton", 4400, "Democrat")
propNeeded(clinton, 3000)
totalNeeded("Democrat")
propNeeded(clinton, 3000)
propNeeded("Bernie", 103)
getMethod(propNeeded)
propNeeded()
